# Sourced from: https://www.youtube.com/watch?v=X48VuDVv0do

# Basic Cluster Components:
--Worker Node
-------------------
Processes:
Container Runtime (Docker)
Kublet
Kube Proxy
Services
-------------------
---Pod (container):
   Smallest unit on k8s
   Abstraction over a container
   Usually only 1 app per Pod
   Each Pod gets its own IP address (Internal)
   If a Pod dies, a new one will spin up and get a new IP address
---Service:
   Permanent IP address
   Services and Pods are not connected
   Services are externally accessed
   "Ingress" forwards external request to service
---ConfigMap
   Configuration data of the app (External)
   Should not contain creds
---Secret:
   Encrypted form of ConfigMap
   Can contain creds
   Base 64 encoded
---Volumes:
   Container Based Data Storage
   Attaches physical storage to a Pod (local or remote)
---Deployment:
   Blueprint for app pods
   Can specify replicas (live clones that share the service)
   Abstracts Pods
   NOTE: Databases cannot be replicated!
   Databases can be cloned as a "StatefulSet" instread of a Deployment
   StatefulSets syncs databases so there is no inconsistencies in DB data
   NOTE: DBs are often managed outside of K8s!
----------------------------------------------------------------------------
--Master Node
-------------------
Processes:
API Server
Scheduler
Controller Manager
etcd
-------------------
Setup:
2 - Master Nodes
3 - Worker Nodes

- Master Nodes require less resourses while worker nodes will require more
- Install Bare Metal/VM Server, Install Master/WOrker node processes, Add to cluster

----------------------------------------------------------------------------
Using Minikube:
-------------------
- Master & Worker nodes are all in Docker containers on 1 virtual machine
- Ideal for development & testing but not for production
-------------------
kubectl command line tool:
- interacts with the API Server
- Works with any K8s setup (on prem or cloud)
-------------------
Install & Setup:
On a hypervisor:
- Install Ubuntu Server
- Install Docker.io
- Enable & start Docker
- Install minikube
- Create cluster:
minikube start         (opt)--vm-driver=virtualbox
minikube status        - gets cluster status
kubectl version        - checks version
-------------------
kubectl get nodes      - checks nodes status
kubectl get pods       - checks status of pods
kubectl get services   - checks services (default is Kubernetes service)
-------------------
kubectl create deployment my-nginx --image=docker.io/nginx:v1       - creates a new deployment using the nginx image from docker hub
kubectl get deployments                                             - shows new deployment
kubectl get pod                                                     - shows new pod based on new deployment (nginx)
kubectl get replicaset                                              - shows number of replicas associated with deployment of nginx
kubectl edit deployment my-nginx                                    - Autogenerates configuration of the new deployment with all default values that can be edited in vim
--NOTE: any change to the deployment config file will trigger k8s to create a new deployment based on the change and terminate the exisitng deployment simultaneously
kubectl get pod  (check status of changed deployment of nginx)
kubectl create deployment my-mongodb --image=docker.io/mongodb:v1   - creates a new deployment of mongodb
kubectl logs my-mongodb                                             - outputs log of mongodb deployment; gopod for troublshooting deployments
kubectl exec -it  my-mongodb  --bin/bash                            - takes you into an interactive terminal of the mongodb container
kubectl delete deployment my-mongodb                                - Terminates Deployment, Replicas and Pod
kubectl apply -f {location of yaml file}                            - Config file of a deployment
----------------------------------------

nginx deployment file: my-nginx.yml
------------------------------------------------------

# Nginx Deployment file for Kubernetes
---
apiVersion: apps/v1
kind: Deployment
# Part 1: Metadata Portion of config file
metadata:
  name: my-nginx
  # Labels connect Deployments to Pods
  labels:
    apps: nginx
# Part 2: Specification for the Deployment
spec: 
  replicas: 1
  selector:
    matchlabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
 # Part 3: Specification for the Pod
    spec:
      containers:
      - name: nginx
      image: docker.io/nginx:v1
      ports:
      # matches with the target port & forwards requests from the external service port
      - containerPort: 8080
...

------------------------------------------------------EOF

# NOTE: Changes to the config.yml will trigger a change to the deployment after you save the file and run the command: kubectl apply -f {file.yml}
kubectl get deployment my-nginx -o yaml                                - checks deployment from the etcd component and renders it in yaml format


Exercise: Deploy MongoDB & MongoExpress apps:
-----------------------------------------------------
Workflow:
Browser--->MongoExpress Service--->MongoExpress Pod--->Mongo DB Internal Service--->Momgo DB Pod--->Secret (DB Username/Password)

# Verify Cluster is running:
kubectl get all

1.                # Create a base64 username and password:
echo -n 'rootuser' | base64         # copy {base64 output}
echo -n 'rootpassword' | base64     # copy {base64 output}

2.                                # Create MongoDB Secret:
vi mongodb-secret.yml
------------------------------------------------------

# Secret for mongodb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-secret
type: Opaque
data:
    username:  {base64 output}
    password:  {base64 output}
...

------------------------------------------------------EOF

3.                                        # Deploy Secret:
# Verify file location:
cd k8-configuration
ls  # verify files including mongodb-secret.yml
apply -f mongodb-secret.yml

# Verify secret deployment:
kubectl get secret

4.                            # Create MongoDB Deployment:
vi mongodb-deployment.yml
------------------------------------------------------

# Mongo DB Deployment Config for Kubernetes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  labels:
    apps: mongodb
spec: 
  replicas: 1
  selector:
    matchlabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
      image: docker.io/mongo:v1
      ports:
      # Get data about mongo ports and environtal veriables from Docker Hub
      - containerPort: 27017
      env:
      - name: MONGO_INTIDB_ROOT_USERNAME
        valueFrom:  # info will be stored in a secret file
          secretKeyRef:
            name: mongodb-secret
            key: username
      - name: MONGO_INTIDB_ROOT_PASSWORD
        valueFrom:  # info will be stored in a secret file
          secretKeyRef:
            name: mongodb-secret
            key: password

# Add an external service for mongodb deployment
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
    port: 27017
    TargetPort: 27017
...

------------------------------------------------------EOF

5.                            # Deploy mongodb deploymenet:
kubectl apply -f mongodb-deployment.yml
kubectl get all   # Very all deployments so far
kubectl get service  # Output should look like the following:
---------------------------------------------------------------------------
NAME              TYPE        CLUSTER-IP     EXTERNAL-IP    PORT(S)     AGE
kubernetes        ClusterIP   10.96.0.1      <none>         443/TCP     36m
mongodb-service   ClusterIP   10.96.86.105   <none>         27017/TCP   51s
---------------------------------------------------------------------------

# Verify Pod Status:
kubectl get pod -o wide
kubectl describe service mongobd-service 

6. Create a configmap file to database server:
vi mongodb-configmap.yml
------------------------------------------------------

# configmap for mongodb database
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
data:
  database_url: mongodb-service
...

------------------------------------------------------

7.                                                             # Deploy ConfigMap:
kubectl apply -f mongodb-configmap.yml

8.                                     # Create MongoExpress Deployment & Service:
vi mongoexpress-deployment.yml
------------------------------------------------------

# Mongo Express Deployment Config for Kubernetes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  labels:
    apps: mongo-express
spec: 
  replicas: 1
  selector:
    matchlabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
      image: docker.io/mongo-express:v1
      ports:
      # Get data about mongo ports and environtal veriables from Docker Hub
      - containerPort: 8081
      env:
      - name: ME_CONFIG_MONGODB_ADMINUSERNAME
        valueFrom:  # info will be stored in a secret file
          secretKeyRef:
            name: mongodb-secret
            key: username
      - name: ME_CONFIG_MONGODB_ADMINPASSWORD
        valueFrom:  # info will be stored in a secret file
          secretKeyRef:
            name: mongodb-secret
            key: password 
      - name: ME_CONFIG_MONGODB_SERVER
        valueFrom: # Value stored in a ConfigMap file
          configMapKeyRef:
            name: mongodb-configmap
            key: database_url

# Add an external service for mongoexpress deployment
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
  selector:
    app: mongo-express
  # Set the type to a load balancer that will assign an external IP address and will bind it to a port
  type: LoadBalancer
  ports:
    - protocol: TCP
    port: 8081
    TargetPort: 8081
    # Bind external port range to an external IP
    NodePort: 30000
...
------------------------------------------------------EOF

9.                                      # Deploy mongo-express deploymeny & service:
kubectl apply -f mongoexpress-deployment.yml

10.                                                             # Verify Deployment:
kubectl get all
kubectl get deployments
kubectl get pod
kubectl get service
kubectl logs  # Expected output:
----------------------------------------------------------------------------------------
Mongo Express server listening at http://0.0.0.0:8081
...
Database connected
Admin Database connected
----------------------------------------------------------------------------------------

11. Assogn external service to public IP & port:
minikube service mongo-express-service  # expected output:
|---------|-------------------------|-------------|------------------------------|
|NAMESPACE|          NAME           | TARGET PORT |               URL            |
|---------|-------------------------|-------------|------------------------------|
| default |  mongo-express-service  |             |  http://192.168.64.5:30000   |
|---------|-------------------------|-------------|------------------------------|
Opening service default/mongo-express-service in default browser... (service should render in your web browser)

**************EXERCISE COMPLETE****************



